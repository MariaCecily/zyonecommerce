"""
Django settings for zyon_ecommerce_backend project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    # Add your specific Render backend URL here
    'https://zyon-e-commerce-backend.onrender.com',
    # Or, a more general wildcard for Render subdomains (less secure but common for initial setup)
    '.onrender.com',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework', # Django REST Framework for building APIs
    'corsheaders',    # For Cross-Origin Resource Sharing (React frontend communication)
    # Your project apps
    'core',           # Your e-commerce app (where models, views, etc., are)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Add WhiteNoise for serving static files efficiently in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # IMPORTANT: Must be placed above CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zyon_ecommerce_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zyon_ecommerce_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use dj_database_url to parse DATABASE_URL environment variable for production (PostgreSQL)
# Fallback to SQLite for local development if DATABASE_URL is not set.
DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL')
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' # Set to your local timezone for accuracy. Chennai is in Asia/Kolkata.

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Where collected static files will live in production
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # Where your app's static files are located in development
]
# Configure Whitenoise to compress and cache static files in production
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Media files (user-uploaded content, like product images)
MEDIA_URL = '/media/'
# Where uploaded files will be stored locally (e.g., in your project's `media` folder)
# IMPORTANT: For production, you will need cloud storage (e.g., AWS S3, Cloudinary)
# as files uploaded to Render's ephemeral filesystem will be lost on redeployments/restarts.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- CORS Headers Configuration ---
# Required for your React frontend to make requests to this Django backend
# In production, ONLY list the domains that are allowed to access your API.
# DO NOT use CORS_ALLOW_ALL_ORIGINS = True in production for security reasons.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",        # Your React development server (default port)
    "http://localhost:3001",        # Another common React development port
    # IMPORTANT: Add your specific production frontend URL here when deployed to Render, e.g.:
    # Example: "https://your-frontend-app-name.onrender.com",
    # You can also use a wildcard if you have many subdomains, but be careful with security.
    # "https://*.onrender.com", # More permissive, allows any Render app in *.onrender.com to connect
]

# If your frontend needs to send credentials (like cookies/session IDs/JWTs) to the backend,
# set this to True. Essential for user authentication flows.
CORS_ALLOW_CREDENTIALS = True

# --- Django REST Framework Configuration ---
REST_FRAMEWORK = {
    # Default permission classes for your API.
    # AllowAny for development. In production, change this to IsAuthenticated or custom permissions.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny', # Change to IsAuthenticated in production after adding auth
    ],
    # Specifies parsers to handle different content types in API requests (e.g., JSON, form data, file uploads)
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser', # Essential for handling file uploads (e.g., product images)
    ],
    # You might also add renderers like JSONRenderer and browsable API renderer
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer', # Useful for development and testing
    ],
}
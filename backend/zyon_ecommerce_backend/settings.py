"""
Django settings for zyon_ecommerce_backend project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os # Import os module to interact with the operating system (for environment variables)
from pathlib import Path
import dj_database_url # Import dj_database_url for parsing PostgreSQL connection string

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use environment variable for SECRET_KEY in production for security
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-rsiv(j(^(lwwyiu7e_d6wy-tzwwgd#w9ra8lx%itmrurt#3+@z') # Use your generated key as default for dev

# SECURITY WARNING: don't run with debug turned on in production!
# Control DEBUG with an environment variable for deployment
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# Allow specific hosts in production. Controlled by environment variable.
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')
# Example for Render: ALLOWED_HOSTS = ['.render.com', 'your-backend-service-name.onrender.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework', # Django REST Framework for building APIs
    'corsheaders',    # For Cross-Origin Resource Sharing (React frontend communication)
    # Your project apps
    'core',           # Your e-commerce app (where models, views, etc., are)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Add WhiteNoise for serving static files efficiently in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # IMPORTANT: Must be placed above CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zyon_ecommerce_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Added for debug context
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zyon_ecommerce_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default to SQLite for local development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Override database settings for Render using DATABASE_URL environment variable
# dj_database_url will parse the connection string provided by Render
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' # Set to your local timezone for accuracy. Chennai is in Asia/Kolkata.

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
# Where Django will collect all static files (from all apps) into a single directory for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (user-uploaded content, like product images)
MEDIA_URL = '/media/'
# Where uploaded files will be stored locally (e.g., in your project's `media` folder)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- CORS Headers Configuration ---
# Required for your React frontend to make requests to this Django backend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",       # Your React development server (default port)
    "http://localhost:3001",       # Another common React development port
    "https://*.onrender.com",      # Allows any subdomain on Render.com to connect
    # IMPORTANT: Add your specific production frontend URL here when deployed, e.g.:
    # "https://your-frontend-app-name.onrender.com",
]

# If your frontend needs to send credentials (like cookies/session IDs) to the backend,
# set this to True. Essential for user authentication flows.
CORS_ALLOW_CREDENTIALS = True

# --- Django REST Framework Configuration ---
REST_FRAMEWORK = {
    # Default permission classes for your API.
    # AllowAny for development, but you'll change this to IsAuthenticated or custom permissions in production.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    # Specifies parsers to handle different content types in API requests (e.g., JSON, form data, file uploads)
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser', # Essential for handling file uploads (e.g., product images)
    ],
}